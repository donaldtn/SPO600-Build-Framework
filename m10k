#!/bin/bash
#
# m10k :: The 10,000 Monkeys Compiler Options Test Framework
#
# SPO600 Class @ Seneca, Fall 2015
#

# --- Script Settings

# Debug messages on=1/off=0
DEBUG_MODE=1

# Set number of benchmark runs per build
BENCHMARKS=4

# --- Debug and Cleanup functions

function debug() {
	if [ "$DEBUG_MODE" = "1" ] 
	then
		echo "==== $(date +%Y-%m-%d-%H:%M:%S) === $1" >&2
	fi
}

function cleanup() {
	rm -rf "$TEMPDIR" "$TEMPPARSE" "$TEMPPERMUTE" "$TEMPRESULT" 2>/dev/null
}

# Execute cleanup on specific signals
trap cleanup 0 1 2 3 4 5 6 7 8 15 30

# --- Initialize

# Get the pathname of the input tarball
TARBALL="$(readlink -f "$1")"
if [ ! -f "$TARBALL" ]
then
	echo "$0: tarball '$TARBALL' not found; supply valid tarball name as arg1." >&2
	exit 1
else
	echo "$0: using '$TARBALL' for input" >&2
fi

# Create a temporary directory to explode the tarball
TEMPDIR=$(mktemp -d)
mkdir -p $TEMPDIR
cd $TEMPDIR

# Explode the tarball
debug "Exploding tarball"
tar xf "$TARBALL"
if [ "$?" -ne 0 ]
then
	echo "$0: tarball expansion failed." >&2
	exit 2
fi

# Setup directory variables
M10KDIR="$HOME/.m10k"
if [ ! -d "$M10KDIR" ]
then
	M10KDIR="/usr/local/m10k"
	if [ ! -d "$M10KDIR" ]
	then
		echo "$0: ~/.m10k and /usr/local/m10k directories missing." >&2
		exit 3
	fi
fi

export M10KDIR

# Create tempfile names
TEMPPARSE=$(mktemp)
TEMPPERMUTE=$(mktemp)
TEMPOUT=$(mktemp)
TEMPRESULT=${TEMPDIR}/analysis.txt

echo "$(basename ${TARBALL})" >$TEMPRESULT

# --- Parse options file

debug "Parsing options file"
${M10KDIR}/m10k_parse >$TEMPPARSE
if [ $? != 0 ]
then
	echo "$0: m10k_parse failed." >&2
	exit 4
fi

# --- Permute Options

debug "Permuting Options"
${M10KDIR}/m10k_permute >$TEMPPERMUTE <$TEMPPARSE
if [ $? != 0 ]
then
	echo "$0: m10k_permute failed." >&2
	exit 5
fi

# --- Loop through the permutations

PERM=0

cat "${TEMPPERMUTE}"|while read PERMUTATION
do

echo "#$((++PERM))|${PERMUTATION}" >>$TEMPRESULT

debug "Processing permutation ${PERM}: $PERMUTATION"

# --- Build with selected options

debug "Building"
/usr/bin/time --format="\n%e,%U,%S" ${M10KDIR}/m10k_build <<<$PERMUTATION 2>$TEMPOUT
BUILD_EXIT=$?
BUILD_RESULT=$(tail -1 ${TEMPOUT})

if [ "${BUILD_EXIT}" != 0 ]
then
	echo "$0: m10k_build failed." >&2
fi

echo "TEMPOUT: $(<$TEMPOUT)"
echo "BUILD_RESULT: '$BUILD_RESULT'"
BUILD_ELAPSED=$(cut -d, -f1 <<<$BUILD_RESULT)
BUILD_USER=$(   cut -d, -f2 <<<$BUILD_RESULT)
BUILD_SYSTEM=$( cut -d, -f3 <<<$BUILD_RESULT)
BUILD_CPU=$(echo $BUILD_USER + $BUILD_SYSTEM|bc)
BINARY_SIZE=0   # Cannot determine without plugin support - skip for now

echo "${BUILD_EXIT}|${BUILD_ELAPSED}|${BUILD_CPU}|${BINARY_SIZE}" >> $TEMPRESULT

# --- Test for successful build

debug "Testing build"

${M10KDIR}/m10k_test
TEST_RESULT=$?

echo "${TEST_RESULT}" >> $TEMPRESULT

if [ "${TEST_RESULT}" != 0 ]
then
	echo "$0: m10k_test failed." >&2
else

# --- Loop through benchmark runs

debug "Starting benchmarking"

for ((I=0; I<$BENCHMARKS; I++))
do

debug "Benchmark run $I"

# --- Perform Benchmark

${M10KDIR}/m10k_benchmark >$TEMPOUT </dev/null
BENCH_EXIT=$?
if [ "${BENCH_EXIT}" != 0 ]
then
	echo "$0: m10k_benchmark failed." >&2
	exit 20
fi

echo "\$$((I+1))|$(tail -1 ${TEMPOUT})" >> $TEMPRESULT

done # loop through benchmark runs

fi # m10k build success/run benchmarks

done # loop through permutations

# --- Record Results

${M10KDIR}/m10k_cogitate
if [ $? != 0 ]
then
	echo "$0: m10k_cogitate failed." >&2
#	exit 7
fi

# --- Tidy and exit

debug "Finished"

cleanup
exit 0

